% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GenerateRmd.R
\name{GenerateRmd}
\alias{GenerateRmd}
\title{Create an Rmd file for the report}
\usage{
GenerateRmd(
  usexlsform = FALSE,
  form = NULL,
  ds = NULL,
  survey_consent = NULL,
  reportingcol = NULL,
  UniqueID = NULL,
  dates = NULL,
  surveydate = NULL,
  start_collection = NULL,
  dateformat = NULL,
  minduration = NULL,
  sdval = NULL,
  HHSize = NULL,
  delete = FALSE,
  correct = FALSE,
  enumeratorID = NULL,
  enumeratorcheck = FALSE,
  otherpattern = NULL,
  adm = NULL,
  ds_site = NULL,
  ds_coord = NULL,
  adm_site = NULL,
  pts = NULL,
  buff = NULL,
  questions = NULL,
  value = NULL,
  minnbanswers = NULL,
  sf = NULL,
  dssite = NULL,
  sfsite = NULL,
  sftarget = NULL,
  sfnbpts = NULL,
  formul = NULL,
  colorder = NULL
)
}
\arguments{
\item{ds}{dataset as a data.frame object}

\item{survey_consent}{name as a string of the field in the dataset where the survey consent is stored}

\item{reportingcol}{columns as a list of string name from the dataset you want in the result (c('col1','col2',...))}

\item{UniqueID}{name as a string of the field in the dataset where the unique ID is stored}

\item{dates}{fields as a list of string where the survey start and end date is stored (c('start_date','end_date'))}

\item{surveydate}{name as a string of the field in the dataset where the date of the survey is stored}

\item{start_collection}{date as a string of the first day of data collection ('yyyy-mm-dd')}

\item{dateformat}{format as a string used for the date ('\%m/\%d/\%Y')}

\item{minduration}{minimum acceptable survey duration as integer in minutes}

\item{sdval}{number of standard deviation for which the data within is considered as acceptable}

\item{HHSize}{name as a string of the field in the dataset where the household size is stored}

\item{delete}{delete action to be done as a boolean (TRUE/FALSE)}

\item{correct}{correction action to be done as a boolean (TRUE/FALSE)}

\item{enumeratorID}{name as a string of the field in the dataset where the enumerator ID is stored}

\item{enumeratorcheck}{specify if the report has to be displayed for each enumerator or not as a boolean (TRUE/FALSE)}

\item{otherpattern}{pattern as string to identify the fields containing others values ('_other$')}

\item{adm}{dataset containing the shapefile - Regardless the projection used for the shapefile, it is transformed to WGS84}

\item{ds_site}{name as a string of the field in the dataset where the site is stored}

\item{ds_coord}{columns as a list of string name from the dataset where the GPS coordinates are stored (c('Long','Lat'))}

\item{adm_site}{name as a string of the field in the shapefile where the site is stored}

\item{pts}{dataset containing the shapefile - Regardless the projection used for the shapefile, it is transformed to WGS84}

\item{buff}{value as an integer in meter to determine the buffer from a sampled point which is acceptable}

\item{questions}{columns as a list of string name from the dataset you want to check against (c('col1','col2',...))}

\item{value}{Maximum acceptable value as integer for the checked fields}

\item{minnbanswers}{minimum number of answers expected per question}

\item{sf}{sampling frame as a data.frame object}

\item{dssite}{name as a string of the field in the dataset where the site is stored}

\item{sfsite}{name as a string of the field in the sampling frame where the site is stored}

\item{sftarget}{name as a string of the field where the target number of survey is stored in the sampling frame}

\item{sfnbpts}{name as a string of the field where the number of points generated is stored in the sampling frame}

\item{formul}{formulas as a list of string used to compute the final number of eligible surveys and the variance from the target (C('formula1','formula2')).
the values/fields available are: done and the ones generated according the survey consent values (one per value)}

\item{colorder}{column names as a list of string to order the colums in the result (C('col1','col2',...)).
the columns available are: site, done, final, variance and the ones generated according the survey consent values (one per value)}
}
\value{
vignette file
}
\description{
Create an Rmd file for the report
}
\examples{
\dontrun{
ds <- HighFrequencyChecks::sample_dataset

survey_consent <- "survey_consent"
reportingcol <- c("enumerator_id","X_uuid")
UniqueID <- "X_uuid"

## Setting dates
dates <- c("survey_start","end_survey")
surveydate <- "survey_date"
start_collection <- "2018-11-11"
dateformat <- "\%m/\%d/\%Y"
minduration <- 30
sdval <- 2
HHSize <-"consent_received.respondent_info.hh_size"


## Setting action on dataset
delete <- FALSE
correct <- FALSE

## Setting enumerator
enumeratorID <- "enumerator_id"
enumeratorcheck <- FALSE
otherpattern <- "_other$"

## Setting linked geodata
adm <- HighFrequencyChecks::admin
ds_site <- "union_name"
ds_coord <- c("X_gps_reading_longitude","X_gps_reading_latitude")
adm_site <- "Union"
pts <- HighFrequencyChecks::SamplePts
buff <- 10

## setting questions to check
questions <-c("consent_received.food_security.spend_food",
  "consent_received.food_security.spend_medication",
  "consent_received.food_security.spend_education",
  "consent_received.food_security.spend_fix_shelter",
  "consent_received.food_security.spend_clothing",
  "consent_received.food_security.spend_hygiene",
  "consent_received.food_security.spend_fuel",
  "consent_received.food_security.spend_hh_items",
  "consent_received.food_security.spend_transport",
  "consent_received.food_security.spend_communication",
  "consent_received.food_security.spend_tobacco",
  "consent_received.food_security.spend_rent",
  "consent_received.food_security.spend_debts",
  "consent_received.food_security.spend_other")
value <- 25000
minnbanswers <- 3


## setting sampling plan
sf <- HighFrequencyChecks::SampleSize
dssite <- "union_name"
sfsite <- "Union"
survey_consent <- "survey_consent"
sftarget <- "SS"
sfnbpts <- "TotPts"
formul <- c("done-no-not_eligible-delete",
"done-no-not_eligible-deleted-SS")
colorder <- c("site","SS","Provisio","done","not_eligible",
 "no","deleted","yes","final","variance")

GenerateRmd(ds,
  survey_consent,
  reportingcol,
  UniqueID,
  dates,
  surveydate,
  start_collection,
  dateformat,
  minduration,
  sdval,
  HHSize,
  delete,
  correct,
  enumeratorID,
  enumeratorcheck,
  otherpattern,
  adm,
  ds_site,
  ds_coord,
  adm_site,
  pts,
  buff,
  questions,
  value,
  minnbanswers,
  sf, dssite,
  sfsite,
  sftarget,
  sfnbpts,
  formul,
  colorder)
}
}
\author{
Yannick Pascaud, Edouard Legoupil
}
